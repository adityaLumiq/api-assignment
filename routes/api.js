const express = require('express');
const router = express.Router();
const User =  require('../models/user')
const validator = require('validator')


/**
 * @swagger
 * components:
 *  schemas:
 *      User:
 *          type: object
 *          required:
 *              - name
 *              - age
 *              - email
 *              - mob
 *              - birthday
 *          properties:
 *              id:
 *                  type: ObjectId
 *                  description: A unique id auto-generated by mongoose 
 *              name:
 *                  type: string
 *                  description: Name of the user
 *              age:
 *                  type: integer
 *                  minimum: 18
 *                  description: Age of the user (>18)
 *              email: 
 *                  type: string
 *                  description: Valid Email of the user
 *              gender: 
 *                  type: string
 *                  description: Gender of the user 
 *              mob: 
 *                  type: number
 *                  description: 10 digit mobile number of the user            
 *              birthday: 
 *                  type: string
 *                  description: Date of the user's birthday in dd-mm-yyyy format
 *              city: 
 *                  type: string
 *                  description: City of the user 
 *              state: 
 *                  type: string
 *                  description: State of the user 
 *              country: 
 *                  type: string
 *                  description: Country of the user 
 *              address1: 
 *                  type: string
 *                  description: Address 1 of the user
 *              address2: 
 *                  type: string
 *                  description: Address 2 of the user
 *          example:
 *               name: Jeffery Bezos
 *               age: 67
 *               email: jeff.super@amz.com
 *               gender: supervillian
 *               mob: 9090909090
 *               birthday: 01-01-1881
 *               city: Knowhere
 *               state: solid
 *               country: USA
 *               address1: 222@222111---, dfa city
 *               address2: ???^^ , @ faa, w4 st, USA
*/

/** 
 * @swagger
 * tags:
 *  name: Users
 *  description: The users API
 *
 *  
*/

/**
 *
 * @swagger
 * /api/users:
 *  get:
 *      summary: Returns a list of all the users
 *      tags: [Users]
 *      responses:
 *          200:
 *              description: The list of all the users
 *              content:
 *                  application/json:
 *                      schema:
 *                          type: array
 *                          items:
 *                              $ref: '#/components/schemas/User'
 * 
 *
*/ 

/**
 *
 * @swagger
 * /api/users:
 *  post:
 *      summary: Create a new user
 *      tags: [Users]
 *      requestBody:
 *          required: true
 *          content:
 *              application/json:
 *                  schema:
 *                      $ref: '#/components/schemas/User'
 *      responses:
 *          200:
 *              description: The user was successfully created
 *              content:
 *                  application/json:
 *                      schema:
 *                           $ref: '#/components/schemas/User'
 *          422:
 *              description: Incorrect fiels entered. Failed to create new user.
 * 
 * 
 *
*/ 
/**
 *
 * @swagger
 * /api/users/{id}:
 *  put:
 *      summary: Update an existing user details
 *      tags: [Users]
 *      parameters:
 *        - in: path
 *          name: id
 *          schema:
 *              type: string
 *              required: true
 *              description: The user id
 *              example: 641041054c6656dbf03a7b74
 *      requestBody:
 *          required: true
 *          content:
 *              application/json:
 *                  schema: 
 *                      $ref: '#/components/schemas/User'
 *      responses:
 *          200:
 *              description: The user was successfully edited.
 *              content:
 *                  application/json:
 *                      schema:
 *                           $ref: '#/components/schemas/User'
 *          404:
 *              description: User with given id does not exist.
 * 
 * 
 *
*/ 
/**
 *
 * @swagger
 * /api/users/{id}:
 *  delete:
 *      summary: Delete a user.
 *      tags: [Users]
 *      parameters:
 *        - in: path
 *          name: id
 *          schema:
 *              type: string
 *              required: true
 *              description: The user id
 *              example: 641041054c6656dbf03a7b74
 *      responses:
 *          200:
 *              description: The user was successfully deleted.
 *              content:
 *                  application/json:
 *                      schema:
 *                           $ref: '#/components/schemas/User'
 *          404:
 *              description: User with given id does not exist.
 * 
 * 
 *
*/ 


router.get('/users', function(req, res){
    User.find({})
    .then(function(users){
        res.send(users)
    })
})


router.post('/users', function(req, res){
    // console.log(req.body)
    User.create(req.body).then(function(user){
        console.log('yo')
        res.send(user)
    })
    .catch(function(err){
        res.status(422).send(err.message)
    })
    
})

router.put('/users/:id', function(req, res){
    User.findByIdAndUpdate({_id: req.params.id}, req.body)
    .then(function(user){ 
        res.send(user)
    })
    .catch(function(err){
        res.status(400).send(err)
    })
})

router.delete('/users/:id', function(req, res){
    // console.log(req.params.id)
    User.findByIdAndDelete({_id: req.params.id})
    .then(function(user){
        res.send(user)
    })
    .catch(function(err){
        res.status(404).send(err)
    })
    
})

module.exports = router;